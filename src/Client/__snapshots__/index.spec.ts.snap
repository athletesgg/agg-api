// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Client should initialize a basic client 1`] = `
Client {
  "_timeout": 3000,
  "_url": "https://api-v3.athletes.gg",
  "activities": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "activities",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "app": Object {
    "_events": undefined,
    "_eventsCount": 0,
    "_maxListeners": undefined,
    "_setup": false,
    "addListener": [Function],
    "authenticate": [Function],
    "authentication": AuthenticationClient {
      "app": [Circular],
      "authenticated": false,
      "options": Object {
        "Authentication": [Function],
        "header": "Authorization",
        "jwtStrategy": "jwt",
        "locationErrorKey": "error",
        "locationKey": "access_token",
        "path": "/authentication",
        "scheme": "Bearer",
        "storage": MemoryStorage {
          "store": Object {},
        },
        "storageKey": "feathers-jwt",
      },
    },
    "configure": [Function],
    "defaultService": [Function],
    "disable": [Function],
    "disabled": [Function],
    "emit": [Function],
    "enable": [Function],
    "enabled": [Function],
    "eventMappings": Object {
      "create": "created",
      "patch": "patched",
      "remove": "removed",
      "update": "updated",
    },
    "eventNames": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hookTypes": Array [
      "before",
      "after",
      "error",
      "finally",
    ],
    "hooks": [Function],
    "init": [Function],
    "io": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "listenerCount": [Function],
    "listeners": [Function],
    "logout": [Function],
    "methods": Array [
      "find",
      "get",
      "create",
      "update",
      "patch",
      "remove",
    ],
    "mixins": Array [
      [Function],
      [Function],
    ],
    "off": [Function],
    "on": [Function],
    "once": [Function],
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "providers": Array [],
    "rawListeners": [Function],
    "reAuthenticate": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "service": [Function],
    "services": Object {
      "activities": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "activities",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "authManagement": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "authManagement",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "characters": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "characters",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "events": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "events",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "featured": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "featured",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "followers": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "followers",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "games": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "games",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "images": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "images",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "matches": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "matches",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "notifications": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "notifications",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "placings": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "placings",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "schedules": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "schedules",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
      "users": Object {
        "addListener": [Function],
        "connection": SocketMock {
          "_callbacks": Object {
            "$disconnect": Array [
              [Function],
            ],
          },
          "_emitFn": [Function],
          "broadcast": Object {
            "to": [Function],
          },
          "generalCallbacks": Object {},
          "io": Object {
            "timeout": [Function],
          },
          "joinedRooms": Array [],
          "rooms": Array [],
          "socketClient": SocketClient {
            "_emitFn": [Function],
            "_socketMock": [Circular],
            "connected": true,
            "disconnected": false,
          },
        },
        "create": [Function],
        "emit": [Function],
        "eventNames": [Function],
        "events": Array [
          "created",
          "updated",
          "removed",
          "patched",
        ],
        "find": [Function],
        "get": [Function],
        "getMaxListeners": [Function],
        "hooks": [Function],
        "listenerCount": [Function],
        "listeners": [Function],
        "method": "emit",
        "methods": Object {
          "create": Array [
            "data",
            "params",
          ],
          "find": Array [
            "params",
          ],
          "get": Array [
            "id",
            "params",
          ],
          "patch": Array [
            "id",
            "data",
            "params",
          ],
          "remove": Array [
            "id",
            "params",
          ],
          "update": Array [
            "id",
            "data",
            "params",
          ],
        },
        "on": [Function],
        "once": [Function],
        "patch": [Function],
        "path": "users",
        "prependListener": [Function],
        "prependOnceListener": [Function],
        "remove": [Function],
        "removeAllListeners": [Function],
        "removeListener": [Function],
        "setMaxListeners": [Function],
        "timeout": 3000,
        "update": [Function],
      },
    },
    "set": [Function],
    "setMaxListeners": [Function],
    "settings": Object {
      "storage": StorageWrapper {
        "storage": MemoryStorage {
          "store": Object {},
        },
      },
    },
    "setup": [Function],
    "use": [Function],
    "version": "4.5.10",
  },
  "authManagement": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "authManagement",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "authenticate": [Function],
  "characters": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "characters",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "events": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "events",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "featured": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "featured",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "followers": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "followers",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "games": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "games",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "images": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "images",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "matches": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "matches",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "notifications": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "notifications",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "placings": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "placings",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "schedules": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "schedules",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
  "socket": SocketMock {
    "_callbacks": Object {
      "$disconnect": Array [
        [Function],
      ],
    },
    "_emitFn": [Function],
    "broadcast": Object {
      "to": [Function],
    },
    "generalCallbacks": Object {},
    "io": Object {
      "timeout": [Function],
    },
    "joinedRooms": Array [],
    "rooms": Array [],
    "socketClient": SocketClient {
      "_emitFn": [Function],
      "_socketMock": [Circular],
      "connected": true,
      "disconnected": false,
    },
  },
  "users": Object {
    "addListener": [Function],
    "connection": SocketMock {
      "_callbacks": Object {
        "$disconnect": Array [
          [Function],
        ],
      },
      "_emitFn": [Function],
      "broadcast": Object {
        "to": [Function],
      },
      "generalCallbacks": Object {},
      "io": Object {
        "timeout": [Function],
      },
      "joinedRooms": Array [],
      "rooms": Array [],
      "socketClient": SocketClient {
        "_emitFn": [Function],
        "_socketMock": [Circular],
        "connected": true,
        "disconnected": false,
      },
    },
    "create": [Function],
    "emit": [Function],
    "eventNames": [Function],
    "events": Array [
      "created",
      "updated",
      "removed",
      "patched",
    ],
    "find": [Function],
    "get": [Function],
    "getMaxListeners": [Function],
    "hooks": [Function],
    "listenerCount": [Function],
    "listeners": [Function],
    "method": "emit",
    "methods": Object {
      "create": Array [
        "data",
        "params",
      ],
      "find": Array [
        "params",
      ],
      "get": Array [
        "id",
        "params",
      ],
      "patch": Array [
        "id",
        "data",
        "params",
      ],
      "remove": Array [
        "id",
        "params",
      ],
      "update": Array [
        "id",
        "data",
        "params",
      ],
    },
    "on": [Function],
    "once": [Function],
    "patch": [Function],
    "path": "users",
    "prependListener": [Function],
    "prependOnceListener": [Function],
    "remove": [Function],
    "removeAllListeners": [Function],
    "removeListener": [Function],
    "setMaxListeners": [Function],
    "timeout": 3000,
    "update": [Function],
  },
}
`;
